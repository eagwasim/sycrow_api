package com.sycrow.api.blockchain;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class Contracts_SycrowBarterFactory_sol_SyCrowBarterFactory extends Contract {
    public static final String BINARY = "";

    public static final String FUNC__WETH = "_WETH";

    public static final String FUNC_ALLBARTERS = "allBarters";

    public static final String FUNC_ALLBARTERSLENGTH = "allBartersLength";

    public static final String FUNC_CREATEBARTER = "createBarter";

    public static final String FUNC_FEECOLLECTOR = "feeCollector";

    public static final String FUNC_GETFEE = "getFee";

    public static final String FUNC_GETUSERBARTER = "getUserBarter";

    public static final String FUNC_GETUSERBARTERS = "getUserBarters";

    public static final String FUNC_GETUSERBARTERSLENGTH = "getUserBartersLength";

    public static final String FUNC_ISPAUSED = "isPaused";

    public static final String FUNC_NOTIFYTRADEBYBARTER = "notifyTradeByBarter";

    public static final String FUNC_NOTIFYWITHDRAWFROMBARTER = "notifyWithdrawFromBarter";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SETFEECOLLECTOR = "setFeeCollector";

    public static final String FUNC_SETPAUSE = "setPause";

    public static final String FUNC_SETUSEPRICEFEEDS = "setUsePriceFeeds";

    public static final String FUNC_TOTALBARTERDEPLOYED = "totalBarterDeployed";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_USEPRICEFEEDS = "usePriceFeeds";

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SYCROWBARTERCREATED_EVENT = new Event("SyCrowBarterCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event SYCROWTRADEBYBARTER_EVENT = new Event("SyCrowTradeByBarter", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SYCROWWITHDRAWFROMBARTER_EVENT = new Event("SyCrowWithdrawFromBarter", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected Contracts_SycrowBarterFactory_sol_SyCrowBarterFactory(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Contracts_SycrowBarterFactory_sol_SyCrowBarterFactory(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Contracts_SycrowBarterFactory_sol_SyCrowBarterFactory(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Contracts_SycrowBarterFactory_sol_SyCrowBarterFactory(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<SyCrowBarterCreatedEventResponse> getSyCrowBarterCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SYCROWBARTERCREATED_EVENT, transactionReceipt);
        ArrayList<SyCrowBarterCreatedEventResponse> responses = new ArrayList<SyCrowBarterCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SyCrowBarterCreatedEventResponse typedResponse = new SyCrowBarterCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._createdBy = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._barter = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._barterType = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._inToken = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._outToken = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._deadline = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse._isPrivate = (Boolean) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SyCrowBarterCreatedEventResponse> syCrowBarterCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SyCrowBarterCreatedEventResponse>() {
            @Override
            public SyCrowBarterCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SYCROWBARTERCREATED_EVENT, log);
                SyCrowBarterCreatedEventResponse typedResponse = new SyCrowBarterCreatedEventResponse();
                typedResponse.log = log;
                typedResponse._createdBy = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._barter = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._barterType = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._inToken = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._outToken = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._deadline = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse._isPrivate = (Boolean) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SyCrowBarterCreatedEventResponse> syCrowBarterCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SYCROWBARTERCREATED_EVENT));
        return syCrowBarterCreatedEventFlowable(filter);
    }

    public List<SyCrowTradeByBarterEventResponse> getSyCrowTradeByBarterEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SYCROWTRADEBYBARTER_EVENT, transactionReceipt);
        ArrayList<SyCrowTradeByBarterEventResponse> responses = new ArrayList<SyCrowTradeByBarterEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SyCrowTradeByBarterEventResponse typedResponse = new SyCrowTradeByBarterEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._barter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._trader = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._inAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.outAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SyCrowTradeByBarterEventResponse> syCrowTradeByBarterEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SyCrowTradeByBarterEventResponse>() {
            @Override
            public SyCrowTradeByBarterEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SYCROWTRADEBYBARTER_EVENT, log);
                SyCrowTradeByBarterEventResponse typedResponse = new SyCrowTradeByBarterEventResponse();
                typedResponse.log = log;
                typedResponse._barter = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._trader = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._inAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.outAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SyCrowTradeByBarterEventResponse> syCrowTradeByBarterEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SYCROWTRADEBYBARTER_EVENT));
        return syCrowTradeByBarterEventFlowable(filter);
    }

    public List<SyCrowWithdrawFromBarterEventResponse> getSyCrowWithdrawFromBarterEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SYCROWWITHDRAWFROMBARTER_EVENT, transactionReceipt);
        ArrayList<SyCrowWithdrawFromBarterEventResponse> responses = new ArrayList<SyCrowWithdrawFromBarterEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SyCrowWithdrawFromBarterEventResponse typedResponse = new SyCrowWithdrawFromBarterEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._barter = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._trader = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._value1 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._value2 = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SyCrowWithdrawFromBarterEventResponse> syCrowWithdrawFromBarterEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SyCrowWithdrawFromBarterEventResponse>() {
            @Override
            public SyCrowWithdrawFromBarterEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SYCROWWITHDRAWFROMBARTER_EVENT, log);
                SyCrowWithdrawFromBarterEventResponse typedResponse = new SyCrowWithdrawFromBarterEventResponse();
                typedResponse.log = log;
                typedResponse._barter = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._trader = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._value1 = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._value2 = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SyCrowWithdrawFromBarterEventResponse> syCrowWithdrawFromBarterEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SYCROWWITHDRAWFROMBARTER_EVENT));
        return syCrowWithdrawFromBarterEventFlowable(filter);
    }

    public RemoteFunctionCall<String> _WETH() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC__WETH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> allBarters(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ALLBARTERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> allBartersLength() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ALLBARTERSLENGTH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> createBarter(String inToken, String outToken, BigInteger deposited, BigInteger expected, BigInteger deadline, BigInteger barterType, Boolean allowMultiBarter, Boolean isPrivate) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEBARTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, inToken), 
                new org.web3j.abi.datatypes.Address(160, outToken), 
                new org.web3j.abi.datatypes.generated.Uint256(deposited), 
                new org.web3j.abi.datatypes.generated.Uint256(expected), 
                new org.web3j.abi.datatypes.generated.Uint256(deadline), 
                new org.web3j.abi.datatypes.generated.Uint8(barterType), 
                new org.web3j.abi.datatypes.Bool(allowMultiBarter), 
                new org.web3j.abi.datatypes.Bool(isPrivate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> feeCollector() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FEECOLLECTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getFee() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETFEE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getUserBarter(String userAddress, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUSERBARTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, userAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getUserBarters(String userAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUSERBARTERS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, userAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getUserBartersLength(String userAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUSERBARTERSLENGTH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, userAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> isPaused() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISPAUSED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> notifyTradeByBarter(String _barter, String _trader, BigInteger _inAmount, BigInteger _outAmount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_NOTIFYTRADEBYBARTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _barter), 
                new org.web3j.abi.datatypes.Address(160, _trader), 
                new org.web3j.abi.datatypes.generated.Uint256(_inAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(_outAmount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> notifyWithdrawFromBarter(String _barter, String _trader, BigInteger _value1, BigInteger _value2) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_NOTIFYWITHDRAWFROMBARTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _barter), 
                new org.web3j.abi.datatypes.Address(160, _trader), 
                new org.web3j.abi.datatypes.generated.Uint256(_value1), 
                new org.web3j.abi.datatypes.generated.Uint256(_value2)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFeeCollector(String _feeCollector) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETFEECOLLECTOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _feeCollector)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setPause(Boolean _pause) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETPAUSE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Bool(_pause)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setUsePriceFeeds(BigInteger baseFee, Boolean enable) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETUSEPRICEFEEDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(baseFee), 
                new org.web3j.abi.datatypes.Bool(enable)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> totalBarterDeployed() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALBARTERDEPLOYED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> usePriceFeeds() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USEPRICEFEEDS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    @Deprecated
    public static Contracts_SycrowBarterFactory_sol_SyCrowBarterFactory load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Contracts_SycrowBarterFactory_sol_SyCrowBarterFactory(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Contracts_SycrowBarterFactory_sol_SyCrowBarterFactory load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Contracts_SycrowBarterFactory_sol_SyCrowBarterFactory(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Contracts_SycrowBarterFactory_sol_SyCrowBarterFactory load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Contracts_SycrowBarterFactory_sol_SyCrowBarterFactory(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Contracts_SycrowBarterFactory_sol_SyCrowBarterFactory load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Contracts_SycrowBarterFactory_sol_SyCrowBarterFactory(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Contracts_SycrowBarterFactory_sol_SyCrowBarterFactory> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, BigInteger baseFee, String priceFeed, String WETH) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(baseFee), 
                new org.web3j.abi.datatypes.Address(160, priceFeed), 
                new org.web3j.abi.datatypes.Address(160, WETH)));
        return deployRemoteCall(Contracts_SycrowBarterFactory_sol_SyCrowBarterFactory.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<Contracts_SycrowBarterFactory_sol_SyCrowBarterFactory> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, BigInteger baseFee, String priceFeed, String WETH) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(baseFee), 
                new org.web3j.abi.datatypes.Address(160, priceFeed), 
                new org.web3j.abi.datatypes.Address(160, WETH)));
        return deployRemoteCall(Contracts_SycrowBarterFactory_sol_SyCrowBarterFactory.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Contracts_SycrowBarterFactory_sol_SyCrowBarterFactory> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger baseFee, String priceFeed, String WETH) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(baseFee), 
                new org.web3j.abi.datatypes.Address(160, priceFeed), 
                new org.web3j.abi.datatypes.Address(160, WETH)));
        return deployRemoteCall(Contracts_SycrowBarterFactory_sol_SyCrowBarterFactory.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<Contracts_SycrowBarterFactory_sol_SyCrowBarterFactory> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger baseFee, String priceFeed, String WETH) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(baseFee), 
                new org.web3j.abi.datatypes.Address(160, priceFeed), 
                new org.web3j.abi.datatypes.Address(160, WETH)));
        return deployRemoteCall(Contracts_SycrowBarterFactory_sol_SyCrowBarterFactory.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class SyCrowBarterCreatedEventResponse extends BaseEventResponse {
        public String _createdBy;

        public String _barter;

        public BigInteger _barterType;

        public String _inToken;

        public String _outToken;

        public BigInteger _deadline;

        public Boolean _isPrivate;
    }

    public static class SyCrowTradeByBarterEventResponse extends BaseEventResponse {
        public String _barter;

        public String _trader;

        public BigInteger _inAmount;

        public BigInteger outAmount;
    }

    public static class SyCrowWithdrawFromBarterEventResponse extends BaseEventResponse {
        public String _barter;

        public String _trader;

        public BigInteger _value1;

        public BigInteger _value2;
    }
}
